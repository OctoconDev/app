package app.octocon.app.ui.compose.components

import androidx.compose.animation.core.EaseInOut
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.StartOffset
import androidx.compose.animation.core.StartOffsetType
import androidx.compose.animation.core.VectorConverter
import androidx.compose.animation.core.animateValue
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.SolidColor
import androidx.compose.ui.graphics.vector.Group
import androidx.compose.ui.graphics.vector.Path
import androidx.compose.ui.graphics.vector.PathNode
import androidx.compose.ui.graphics.vector.PathParser
import androidx.compose.ui.graphics.vector.VectorPainter
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.unit.dp
import kotlin.math.PI
import kotlin.math.cos
import kotlin.math.sin

sealed class LogoColorTokens(
  val backgroundHighlight: Color,
  val backgroundShadow: Color,
  val primaryHighlight: Color,
  val primaryShadow: Color,
  val secondaryHighlight: Color,
  val secondaryShadow: Color,
  val sparkle: Color
) {
  companion object Default : LogoColorTokens(
    backgroundHighlight = Color(0xFF1C4698),
    backgroundShadow = Color(0xFF48318F),
    primaryHighlight = Color(0xFF3FC6EC),
    primaryShadow = Color(0xFF3AB4D8),
    secondaryHighlight = Color(0xFFC171AE),
    secondaryShadow = Color(0xFFD84799),
    sparkle = Color(0xFFFFFFFF)
  )
}

private class Nub(
  val pathData: List<PathNode>,
  val gradient: (LogoColorTokens) -> Brush
)

private val nubs = listOf(
  Nub( // 1
    PathParser()
      .parsePathString("M362.75,54.51c11.98-9.97,28.25-13.33,46.32-11.06,25.19,3.16,47.01,25.51,50.18,49.47,1.34,10.12.96,20.25-5.04,29.26-2.42,3.64-5.61,6.26-9.64,7.95-5.59,2.33-8.85,1.34-12.21-3.73-5.5-8.29-12.36-14.97-22.32-17.42-14.5-3.56-27.04.13-37.51,10.82-2.58,2.64-5.12,5.35-7.92,7.74-6.56,5.6-12.47,5.06-18.08-1.63-5.61-6.68-8.21-14.61-8.35-23.2-.29-19.13,7.63-34.43,24.58-48.21Z")
      .toNodes()
  ) {
    Brush.linearGradient(
      0f to it.primaryHighlight,
      1f to it.primaryShadow,
      start = Offset(399.02f, 131.37f),
      end = Offset(399.02f, 42.77f)
    )
  },
  Nub( // 2
    PathParser().parsePathString(
      "M655.06,172.67c-1.42-15.52-10.55-29.4-24.93-40.56-20.05-15.57-51.28-15.19-70.47-.49-8.11,6.21-15,13.64-17.13,24.26-.86,4.28-.46,8.4,1.2,12.44,2.3,5.6,5.31,7.2,11.27,5.99,9.75-1.97,19.32-1.85,28.1,3.46,12.78,7.74,19.03,19.21,18.87,34.17-.04,3.69-.17,7.4.12,11.07.68,8.6,5.24,12.39,13.93,11.63,8.69-.76,16.14-4.52,22.31-10.5,13.74-13.32,18.95-29.74,16.72-51.47Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.secondaryHighlight,
      1f to it.secondaryShadow,
      start = Offset(575.05f, 201.38f),
      end = Offset(637.71f, 138.72f)
    )
  },
  Nub( // 3
    PathParser().parsePathString(
      "M737,363.74c9.97,11.97,13.33,28.24,11.06,46.31-3.17,25.18-25.52,46.99-49.49,50.16-10.12,1.34-20.25.96-29.27-5.04-3.64-2.42-6.27-5.61-7.95-9.64-2.33-5.59-1.34-8.85,3.73-12.21,8.29-5.5,14.97-12.35,17.42-22.32,3.56-14.5-.13-27.04-10.82-37.5-2.64-2.58-5.35-5.11-7.74-7.91-5.61-6.56-5.06-12.47,1.63-18.08,6.69-5.61,14.61-8.21,23.2-8.34,19.13-.29,34.44,7.63,48.22,24.57Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.primaryHighlight,
      1f to it.primaryShadow,
      start = Offset(660.11f, 400f),
      end = Offset(748.74f, 400f)
    )
  },
  Nub( // 4
    PathParser().parsePathString(
      "M655.06,633.82c-1.42,15.52-10.55,29.4-24.93,40.56-20.05,15.57-51.28,15.19-70.47.49-8.11-6.21-15-13.64-17.13-24.26-.86-4.28-.46-8.4,1.2-12.44,2.3-5.6,5.31-7.2,11.27-5.99,9.75,1.97,19.32,1.85,28.1-3.46,12.78-7.74,19.03-19.21,18.87-34.17-.04-3.69-.17-7.4.12-11.07.68-8.6,5.24-12.39,13.93-11.63,8.69.76,16.14,4.52,22.31,10.5,13.74,13.32,18.95,29.74,16.72,51.47Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.secondaryShadow,
      1f to it.secondaryHighlight,
      start = Offset(637.71f, 667.77f),
      end = Offset(575.05f, 605.11f)
    )
  },
  Nub( // 5
    PathParser().parsePathString(
      "M362.75,751.99c11.98,9.97,28.25,13.33,46.32,11.06,25.19-3.16,47.01-25.51,50.18-49.47,1.34-10.12.96-20.25-5.04-29.26-2.42-3.64-5.61-6.26-9.64-7.95-5.59-2.33-8.85-1.34-12.21,3.73-5.5,8.29-12.36,14.97-22.32,17.42-14.5,3.56-27.04-.13-37.51-10.82-2.58-2.64-5.12-5.35-7.92-7.74-6.56-5.6-12.47-5.06-18.08,1.63-5.61,6.68-8.21,14.61-8.35,23.2-.29,19.13,7.63,34.43,24.58,48.21Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.primaryHighlight,
      1f to it.primaryShadow,
      start = Offset(399.02f, 675.12f),
      end = Offset(399.02f, 763.73f)
    )
  },
  Nub( // 6
    PathParser().parsePathString(
      "M142.99,633.82c1.42,15.52,10.55,29.4,24.93,40.56,20.05,15.57,51.28,15.19,70.47.49,8.11-6.21,15-13.64,17.13-24.26.86-4.28.46-8.4-1.2-12.44-2.3-5.6-5.31-7.2-11.27-5.99-9.75,1.97-19.32,1.85-28.1-3.46-12.78-7.74-19.03-19.21-18.87-34.17.04-3.69.17-7.4-.12-11.07-.68-8.6-5.24-12.39-13.93-11.63-8.69.76-16.14,4.52-22.31,10.5-13.74,13.32-18.95,29.74-16.72,51.47Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.secondaryShadow,
      1f to it.secondaryHighlight,
      start = Offset(160.34f, 667.77f),
      end = Offset(223f, 605.11f)
    )
  },
  Nub( // 7
    PathParser().parsePathString(
      "M56.11,363.74c-9.97,11.97-13.33,28.24-11.06,46.31,3.17,25.18,25.52,46.99,49.49,50.16,10.12,1.34,20.25.96,29.27-5.04,3.64-2.42,6.27-5.61,7.95-9.64,2.33-5.59,1.34-8.85-3.73-12.21-8.29-5.5-14.97-12.35-17.42-22.32-3.56-14.5.13-27.04,10.82-37.5,2.64-2.58,5.35-5.11,7.74-7.91,5.61-6.56,5.06-12.47-1.63-18.08-6.69-5.61-14.61-8.21-23.2-8.34-19.13-.29-34.44,7.63-48.22,24.57Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.primaryHighlight,
      1f to it.primaryShadow,
      start = Offset(133f, 400f),
      end = Offset(44.37f, 400f)
    )
  },
  Nub( // 8
    PathParser().parsePathString(
      "M142.99,172.67c1.42-15.52,10.55-29.4,24.93-40.56,20.05-15.57,51.28-15.19,70.47-.49,8.11,6.21,15,13.64,17.13,24.26.86,4.28.46,8.4-1.2,12.44-2.3,5.6-5.31,7.2-11.27,5.99-9.75-1.97-19.32-1.85-28.1,3.46-12.78,7.74-19.03,19.21-18.87,34.17.04,3.69.17,7.4-.12,11.07-.68,8.6-5.24,12.39-13.93,11.63-8.69-.76-16.14-4.52-22.31-10.5-13.74-13.32-18.95-29.74-16.72-51.47Z"
    ).toNodes()
  ) {
    Brush.linearGradient(
      0f to it.secondaryHighlight,
      1f to it.secondaryShadow,
      start = Offset(223f, 201.38f),
      end = Offset(160.34f, 138.72f)
    )
  }
)

private object OctoconLogoPaths {
  val backgroundPath = PathParser().parsePathString(
    "M396.15,0c1.52,0,3.04,0,4.56,0,.98.2,1.94.49,2.93.6,4.27.49,8.61.61,12.81,1.45,16.4,3.27,31.17,10.25,43.54,21.47,25.19,22.85,36.37,51.55,33.59,85.41-1.28,15.66-6.12,30.48-13,44.58-2.47,5.07-5.33,9.95-8.07,14.89-.89,1.6-.52,2.39,1.23,2.91,6.37,1.89,12.71,3.91,19.07,5.82,1.95.59,3.96,1,5.99,1.5.68-6.05.97-11.7,1.99-17.22,4.78-25.88,17.19-47.44,37.94-63.71,23.96-18.79,51.25-24.05,80.73-17.54,21.31,4.71,38.58,16.44,52.07,33.37,20.49,25.71,26.87,55.05,20.12,87.03-4.97,23.57-16.38,44.04-32.58,61.81-10.34,11.35-22.41,20.65-35.12,29.17-3.71,2.49-3.69,2.51-2.16,6.58.38,1.02.87,2.05,1.03,3.11.32,2.13,1.32,2.52,3.34,2.03,14.45-3.51,28.98-6.47,43.87-7.55,13.94-1.01,27.79-.77,41.5,1.99,26.97,5.44,48.92,19.23,65.79,40.85,19.22,24.64,26.56,52.62,20.72,83.32-5.19,27.32-19.83,49.26-41.92,66.09-19.53,14.87-42.16,20.86-66.25,21.84-8.55.35-17.2-.17-25.73-1-8.34-.81-16.61-2.4-24.87-3.86-5.03-.89-10-2.17-15-3.27-1.41-.31-2.12.1-2.41,1.68-.33,1.8-1,3.56-1.72,5.25-.74,1.73-.53,2.88,1.15,4,3.29,2.2,6.42,4.64,9.63,6.96,12.85,9.28,24.54,19.84,34.67,32.02,14.73,17.71,24.45,37.71,27.47,60.8,1.28,9.8,1.15,19.51-.85,29.1-4.11,19.7-13.41,36.7-27.53,51.05-10.16,10.32-22.01,18.1-35.75,22.69-12.3,4.11-24.96,5.71-38.02,4.93-12.63-.76-24.66-3.4-35.97-9.01-13.85-6.86-25.19-16.76-34.66-28.94-14.76-18.99-22.11-40.61-23.23-64.49-.1-2.06-.01-4.13-.01-6.56-8.28,3.12-16.12,6.07-24.07,9.07.31.75.43,1.14.62,1.49,10.85,20.87,18.4,42.74,20.33,66.36,1.19,14.61-.23,28.91-4.72,42.85-6.07,18.82-15.74,35.42-31.24,48.08-21.45,17.51-46.18,23.97-73.34,19.74-23.05-3.58-42.04-14.96-56.89-33.01-18.99-23.09-26.01-49.83-23.52-79.25,1.25-14.83,5.22-29.09,11.1-42.74,3.02-7.02,6.6-13.81,9.99-20.67.89-1.81.61-2.64-1.45-3.24-5.42-1.58-10.78-3.38-16.15-5.13-3.02-.98-6.01-2.04-9.37-3.2,0,1.43,0,2.43,0,3.42.12,12.28-1.7,24.28-5.33,36-5.78,18.63-15.98,34.41-30.64,47.29-8.46,7.44-18.03,13.03-28.64,16.73-13.64,4.77-27.69,5.97-42.06,4.61-11.84-1.12-22.95-4.52-33.35-10.11-18.08-9.73-31.88-23.83-41.7-41.86-11.48-21.08-13.54-43.43-8.85-66.6,4.44-21.9,14.86-40.89,29.49-57.54,10.12-11.52,21.96-21.15,35.24-28.92,5.23-3.06,5.22-3.08,3.54-8.78-.14-.48-.29-.97-.41-1.46-.81-3.19-.82-3.24-3.94-2.31-15.46,4.61-31.29,7.12-47.36,7.85-12.2.55-24.39-.04-36.46-2.42-27.32-5.39-49.35-19.31-66.36-41.16-11.9-15.27-19.33-32.48-20.97-51.96-.97-11.56-.76-23.02,1.91-34.39,5.7-24.3,18.76-43.95,37.87-59.68,10.77-8.87,22.84-15.49,36.29-19.48,11.02-3.27,22.24-5.16,33.73-5.55,11.66-.4,23.26.27,34.77,1.93,9.72,1.4,19.34,3.48,29.03,5.15.68.12,1.91-.55,2.21-1.17.89-1.89,1.32-3.99,2.16-5.91.74-1.7.16-2.56-1.25-3.5-5.69-3.77-11.41-7.51-16.92-11.53-19.09-13.92-34.08-31.34-44.2-52.76-11.29-23.9-14.13-48.86-8.01-74.59,5.24-22.01,17.21-40.04,34.66-54.21,20.75-16.85,44.79-23.49,71.24-20.26,26.61,3.26,47.28,17.05,63.26,38.08,13.16,17.33,19.25,37.23,19.97,58.87.04,1.21.31,2.41.5,3.83,9.57-3.01,18.76-5.9,28.19-8.87-.63-1.33-1.1-2.39-1.62-3.42-3.6-7.15-7.67-14.1-10.73-21.48-9.03-21.82-12.3-44.4-7.31-67.76,4.26-19.93,13.83-37,28.38-51.25,13.82-13.54,30.48-21.48,49.48-24.67C388.14,1.01,392.15.55,396.15,0Z"
  ).toNodes()

  val brainPath = PathParser().parsePathString(
    "M295.26,559.32c-2.86,1.41-5.48,3.29-8.39,4.04-14.18,3.7-28.91-5.43-32.46-19.82-1.96-7.98-1.57-15.72,2.25-23.14.29-.55.39-1.2.2-2.06-.38.35-.85.63-1.12,1.05-4.77,7.62-12.16,10.01-20.5,9.51-21.67-1.3-31.03-20.03-29.95-36.28.02-.32.16-.64.34-1.31.9.24,1.76.42,2.58.71,5.6,1.94,11.21,3.77,17.28,3.24,5.25-.46,9.63-3.46,10.79-7.46,1.85-6.41-1.73-11.63-8.37-11.6-8.12.03-15.78-1.8-22.99-5.27-3.19-1.53-6.39-3.72-8.6-6.42-3.97-4.85-8.49-8.76-13.82-12.04-14.62-8.98-16.35-31.58-3.43-42.37,3.92-3.27,8.44-4.54,13.24-2.93,3.71,1.25,7.24,3.18,10.64,5.16,5.98,3.48,11.71,7.39,17.7,10.84,8.57,4.94,17.93,7.52,27.8,7.61,13.43.12,21.65,7.41,26.81,18.89,3.38,7.53,6.23,15.31,9.28,23,3.33,8.39,6.43,16.84,11.93,24.21,11.06,14.83,29.15,17.38,42.37,13.4,2.13-.64,4.16-2.25,5.74-3.89,2.5-2.6,2.74-5.93,1.42-9.22-1.33-3.32-4.05-4.9-7.53-5.06-4.13-.19-8.26-.16-12.39-.33-7.49-.31-12.73-4.35-16.11-10.65-2.74-5.11-4.88-10.55-7.15-15.9-3.83-9-7.29-18.17-11.37-27.05-7.05-15.34-19.36-23.58-36.03-25.47-2.18-.25-4.36-.54-6.55-.61-8.06-.26-15.3-3-22.23-6.95-10.55-6.02-21.15-11.94-31.8-17.78-10.66-5.84-17.33-14.31-18.15-26.77-.91-13.8,8.98-26.5,22.08-28.55,4.01-.63,7.53.64,10.93,2.38,10.05,5.16,20.67,7.69,31.98,7.3,9.05-.32,17.71-2.33,25.91-6.2,2.75-1.29,5.52-2.55,8.19-3.99,13.91-7.53,27.67.45,31.42,14.38,2.01,7.45,1.34,14.9.12,22.34-1.59,9.74-2.24,19.5.01,29.18,4.8,20.67,16.78,36.17,34.78,47.14,6.63,4.04,13.5,7.69,19.98,11.94,16.12,10.58,24.67,25.5,24.74,44.96.08,23.63.2,47.26.04,70.89-.05,7.71-2.32,14.85-8.3,20.27-5.91,5.35-12.97,6.89-20.53,5.19-8.35-1.88-12.54-10.67-8.7-18.51,2.91-5.96,6.69-11.51,10.1-17.23,1.38-2.32,2.92-4.55,4.16-6.94,2.19-4.22,1.3-9.28-1.9-11.79-3.72-2.92-9.69-2.91-13.05.52-2.15,2.19-3.78,4.93-5.4,7.57-4.36,7.12-8.24,14.55-12.97,21.41-5.13,7.46-12.8,10.31-21.71,9.02-10.77-1.55-16.69-11.35-13.44-21.76.07-.23.08-.49.13-.79ZM581.95,397.95c-1.12.13-2.25.22-3.37.4-6.76,1.15-12.9,3.9-18.78,7.3-13.17,7.62-24.39,17.45-31.72,30.87-4.43,8.11-7.68,16.87-11.24,25.44-3.5,8.41-6.28,17.13-10.14,25.36-7.67,16.34-20.49,25.16-38.97,24.52-3.49-.12-7.08-.72-10.41-1.79-4.53-1.46-7.28-6.74-6.42-11.15.92-4.68,4.01-6.88,9.71-6.88,2.87,0,5.74.15,8.61.02,7.94-.35,14.37-3.43,18.39-10.61.95-1.69,1.95-3.38,2.68-5.16,4.44-10.76,8.73-21.59,13.22-32.33,9.18-21.91,22.92-40.08,43.65-52.35,12.54-7.42,25.84-12.45,40.75-11.81,3.88.17,7.76.44,11.64.4,7.14-.07,13.83-1.57,17.39-8.6,5.18-10.21,3.45-24.92-8.21-32.89-2.79-1.91-5.84-2.58-9.1-1-1.97.95-4,1.81-6,2.7-13.06,5.82-26.41,7.43-40.15,2.57-5.89-2.08-11.74-4.25-17.57-6.48-8.6-3.3-17.31-5.73-26.67-4.35-12.79,1.88-21.33,11.3-21.44,24.18-.04,4.44.88,8.88,1.16,13.33.45,6.97,1.62,14.03.93,20.9-2.18,21.78-12.97,38.8-30.91,51.12-7.01,4.81-14.72,8.57-21.92,13.13-17.1,10.83-26.78,25.95-26.7,46.7.09,22.87-.02,45.75,0,68.62,0,2.52.13,5.07.52,7.56,2.27,14.52,14.5,23.36,28.16,20.46,8.77-1.86,12.81-9.97,8.87-17.99-1.07-2.19-2.37-4.28-3.66-6.36-3.78-6.09-7.78-12.06-11.37-18.27-2.78-4.82-1.61-9.97,2.34-12.63,4.13-2.78,10.21-2.03,13.58,1.89,1.58,1.84,2.87,3.96,4.11,6.06,3.82,6.46,7.42,13.06,11.38,19.44,3.28,5.28,7.61,9.45,14.01,10.89,6.55,1.48,12.49.34,17.38-4.35,4.74-4.56,6.21-10.1,3.92-16.44-.07-.19.06-.45.1-.72,2.29,1.36,4.41,2.9,6.75,3.95,11.24,5.03,25.02-.93,31.02-8.69,7.84-10.15,8.1-21.06,2.79-32.39-.37-.79-.72-1.58-1.08-2.38.17-.19.34-.37.51-.56,4.79,6.82,11.49,9.47,19.44,9.52,7.82.04,14.86-2.25,20.86-7.21,9.57-7.93,13.42-20.58,10.12-29.53-2.14.65-4.27,1.39-6.45,1.96-6.29,1.66-12.61,2.55-18.86-.16-4.53-1.97-7.16-7.29-6-11.91.97-3.86,4.46-5.83,9.87-5.47,8.5.58,16.37-1.74,24.05-5.02,4.28-1.83,8.06-4.42,10.71-8.23,3.12-4.49,7.11-7.79,11.85-10.41,14.06-7.78,16.57-27.94,5.91-39.95-5.59-6.3-13.1-7.84-20.59-3.99-7.61,3.91-13.54,9.65-18.33,16.7-1.55,2.28-3.33,4.5-5.38,6.33-5.41,4.81-12.54,2.41-14.31-4.61-1.28-5.08.77-9.2,3.95-12.75,4.5-5.02,9.31-9.76,13.99-14.63.55-.57,1.09-1.16,1.63-1.73-.08-.18-.16-.35-.24-.53ZM494.85,225.55c-1.32-20.02-21.85-31.11-39.2-21.48-1.64.91-2.56.97-3.82-.55-2.56-3.11-5.71-5.45-9.7-6.55-10.94-3.03-22.85,2.12-28.18,12.17-2.54,4.8-3.84,9.86-3.83,15.3.06,28.02.08,56.03.11,84.05.04,41.43.14,82.87.05,124.3-.01,5.79,2.53,7.12,7.87,7.27,1,.03,2.02-.19,3-.41,10.49-2.3,20.01-6.88,28.43-13.36,16.28-12.52,25.17-28.52,22.17-49.81-.99-7-2.06-14.08-2.01-21.12.14-18.97,13.76-35.37,32.14-40,13.45-3.39,26.27-1.14,38.95,3.45,9.27,3.36,18.32,7.74,28.28,8.43,8.98.62,17.43-1.11,22.69-9.67,3.04-4.95,3.92-10.44,3.18-16.09-1.76-13.56-8.98-23.76-20.04-31.44-6.39-4.44-13.45-6.08-21.16-4.73-4.83.85-9.15,2.75-12.77,6.67.49-3.67,1.11-6.86,1.33-10.08,1.36-20.18-16.63-36.18-35.87-32.04-5.32,1.15-9.66,3.77-12.45,7.78.27-3.83,1.06-8,.79-12.1ZM256.95,267.11c-.23-.11-.45-.24-.64-.41-5.08-4.47-11.19-4.95-17.42-4.06-14.31,2.05-23.97,10.54-30.42,22.99-2.74,5.28-3.83,11.05-2.39,16.96,2.72,11.09,10.68,16.71,21.2,18.9,15.99,3.32,30.84-.05,44.5-8.84,11.67-7.51,19.84-17.65,23.23-31.32.93-3.76,1.65-7.59,2.8-11.29,1.34-4.32,5.71-6.94,10.05-6.43,4.37.52,7.29,3.79,7.63,8.71.09,1.33.04,2.73-.28,4.02-.99,4.01-1.82,8.1-3.31,11.93-2.6,6.66-5.4,13.26-8.61,19.64-2.03,4.03-2.41,3.76,1.32,6.15,13.35,8.56,20.99,20.7,21.51,36.6.25,7.53-.71,15.14-1.64,22.66-2.12,17.08,2.06,32.15,13.72,44.92,9.8,10.74,22.3,17.05,36.04,21.05,2.57.75,5.54.7,8.23.34,3.45-.47,4.52-2.11,4.53-5.56.03-9.28.01-18.57.03-27.85.11-54.09.26-108.18.29-162.28,0-8.93.14-17.93-.92-26.77-1.14-9.5-7.04-16.31-16-19.58-8.89-3.24-17.59-2.23-24.81,4.46-2.3,2.13-3.9,2.39-6.72.96-15.64-7.96-35.56,3.54-36.5,21.05-.23,4.22.43,8.48.67,12.54-3.57-4.56-8.65-7.11-14.9-7.48-6.17-.36-11.97.86-17.22,4.06-9.49,5.78-17.57,16.33-13.26,34.04-.37-.06-.55-.05-.69-.12Z"
  ).toNodes()

  val sparklePath = PathParser().parsePathString(
    "M467.5,253.88c.38-1.03,1.84-1.03,2.22,0l1.13,3.09c1.79,4.9,5.66,8.76,10.56,10.55l3.09,1.13c1.04.38,1.04,1.84,0,2.22l-3.09,1.13c-4.9,1.79-8.76,5.65-10.56,10.55l-1.13,3.09c-.38,1.04-1.84,1.04-2.22,0l-1.13-3.09c-1.79-4.9-5.66-8.76-10.56-10.55l-3.09-1.13c-1.03-.38-1.03-1.84,0-2.22l3.09-1.13c4.9-1.79,8.76-5.65,10.56-10.55l1.13-3.09Z"
  ).toNodes()
}

@Composable
private fun animatedNubs(logoColorTokens: LogoColorTokens) {
  Group(name = "nubs") {
    nubs.forEachIndexed { index, nub ->
      val transition = rememberInfiniteTransition()
      val directionAngle = (2 * PI / nubs.size) * index
      val translationDelta by transition.animateValue(
        initialValue = /*Offset(
              x = (-sin(directionAngle) * 20f).toFloat(),
              y = (cos(directionAngle) * 20f).toFloat()
            ),*/
        Offset(0f, 0f),
        targetValue = Offset(
          x = (sin(directionAngle) * 25f).toFloat(),
          y = (-cos(directionAngle) * 25f).toFloat()
        ),
        typeConverter = Offset.VectorConverter,
        animationSpec = infiniteRepeatable(
          tween(
            2000,
            easing = EaseInOut
          ),
          repeatMode = RepeatMode.Reverse,
          initialStartOffset = StartOffset(
            offsetMillis = index * 500,
            offsetType = StartOffsetType.Delay
          )
        )
      )
      Group(
        name = "nub-${index}",
        translationY = translationDelta.y,
        translationX = translationDelta.x
      ) {
        Path(
          name = "nub-${index}-path",
          pathData = nub.pathData,
          fill = nub.gradient(logoColorTokens)
        )
      }
    }
  }
}

@Composable
private fun staticNubs(logoColorTokens: LogoColorTokens) {
  Group(name = "nubs") {
    nubs.forEachIndexed { index, nub ->
      Path(
        name = "nub-${index}",
        pathData = nub.pathData,
        fill = nub.gradient(logoColorTokens)
      )
    }
  }
}

@Composable
fun octoconLogoVectorPainter(
  logoColorTokens: LogoColorTokens = LogoColorTokens,
  animate: Boolean = false
): VectorPainter {
  return rememberVectorPainter(
    defaultWidth = 800.dp,
    defaultHeight = 800.dp,
    viewportWidth = 800f,
    viewportHeight = 800f,
    autoMirror = false
  ) { _, _ ->
    Group(name = "logo") {
      Path(
        name = "background",
        pathData = OctoconLogoPaths.backgroundPath,
        fill = Brush.linearGradient(
          0f to logoColorTokens.backgroundShadow,
          1f to logoColorTokens.backgroundHighlight,
          start = Offset(679.02f, 678.18f),
          end = Offset(120.69f, 119.84f)
        )
      )
      Path(
        name = "brain",
        pathData = OctoconLogoPaths.brainPath,
        fill = Brush.linearGradient(
          0f to logoColorTokens.secondaryShadow,
          0.76f to logoColorTokens.primaryHighlight,
          1f to logoColorTokens.primaryHighlight,
          start = Offset(551.31f, 550.81f),
          end = Offset(245.54f, 245.04f)
        )
      )
      if (animate) {
        animatedNubs(logoColorTokens)
      } else {
        staticNubs(logoColorTokens)
      }
      Path(
        name = "sparkle",
        pathData = OctoconLogoPaths.sparklePath,
        fill = SolidColor(logoColorTokens.sparkle)
      )
    }
  }
}